// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FEATURECONFIG_FEATURECONFIGS_H_
#define FLATBUFFERS_GENERATED_FEATURECONFIG_FEATURECONFIGS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace FeatureConfigs {

struct FilterbankConfig;
struct FilterbankConfigBuilder;

struct FeatureConfig;
struct FeatureConfigBuilder;

struct FilterbankConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FilterbankConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FFT_START_IDX = 4,
    VT_FFT_END_IDX = 6,
    VT_WEIGHTS = 8,
    VT_UNWEIGHTS = 10,
    VT_NUM_CHANNELS = 12,
    VT_CHANNEL_FREQUENCY_STARTS = 14,
    VT_CHANNEL_WEIGHT_STARTS = 16,
    VT_CHANNEL_WIDTHS = 18
  };
  uint32_t fft_start_idx() const {
    return GetField<uint32_t>(VT_FFT_START_IDX, 0);
  }
  uint32_t fft_end_idx() const {
    return GetField<uint32_t>(VT_FFT_END_IDX, 0);
  }
  const ::flatbuffers::Vector<int16_t> *weights() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_WEIGHTS);
  }
  const ::flatbuffers::Vector<int16_t> *unweights() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_UNWEIGHTS);
  }
  int32_t num_channels() const {
    return GetField<int32_t>(VT_NUM_CHANNELS, 0);
  }
  const ::flatbuffers::Vector<int16_t> *channel_frequency_starts() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_CHANNEL_FREQUENCY_STARTS);
  }
  const ::flatbuffers::Vector<int16_t> *channel_weight_starts() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_CHANNEL_WEIGHT_STARTS);
  }
  const ::flatbuffers::Vector<int16_t> *channel_widths() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_CHANNEL_WIDTHS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_FFT_START_IDX, 4) &&
           VerifyField<uint32_t>(verifier, VT_FFT_END_IDX, 4) &&
           VerifyOffset(verifier, VT_WEIGHTS) &&
           verifier.VerifyVector(weights()) &&
           VerifyOffset(verifier, VT_UNWEIGHTS) &&
           verifier.VerifyVector(unweights()) &&
           VerifyField<int32_t>(verifier, VT_NUM_CHANNELS, 4) &&
           VerifyOffset(verifier, VT_CHANNEL_FREQUENCY_STARTS) &&
           verifier.VerifyVector(channel_frequency_starts()) &&
           VerifyOffset(verifier, VT_CHANNEL_WEIGHT_STARTS) &&
           verifier.VerifyVector(channel_weight_starts()) &&
           VerifyOffset(verifier, VT_CHANNEL_WIDTHS) &&
           verifier.VerifyVector(channel_widths()) &&
           verifier.EndTable();
  }
};

struct FilterbankConfigBuilder {
  typedef FilterbankConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_fft_start_idx(uint32_t fft_start_idx) {
    fbb_.AddElement<uint32_t>(FilterbankConfig::VT_FFT_START_IDX, fft_start_idx, 0);
  }
  void add_fft_end_idx(uint32_t fft_end_idx) {
    fbb_.AddElement<uint32_t>(FilterbankConfig::VT_FFT_END_IDX, fft_end_idx, 0);
  }
  void add_weights(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> weights) {
    fbb_.AddOffset(FilterbankConfig::VT_WEIGHTS, weights);
  }
  void add_unweights(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> unweights) {
    fbb_.AddOffset(FilterbankConfig::VT_UNWEIGHTS, unweights);
  }
  void add_num_channels(int32_t num_channels) {
    fbb_.AddElement<int32_t>(FilterbankConfig::VT_NUM_CHANNELS, num_channels, 0);
  }
  void add_channel_frequency_starts(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> channel_frequency_starts) {
    fbb_.AddOffset(FilterbankConfig::VT_CHANNEL_FREQUENCY_STARTS, channel_frequency_starts);
  }
  void add_channel_weight_starts(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> channel_weight_starts) {
    fbb_.AddOffset(FilterbankConfig::VT_CHANNEL_WEIGHT_STARTS, channel_weight_starts);
  }
  void add_channel_widths(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> channel_widths) {
    fbb_.AddOffset(FilterbankConfig::VT_CHANNEL_WIDTHS, channel_widths);
  }
  explicit FilterbankConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FilterbankConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FilterbankConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FilterbankConfig> CreateFilterbankConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t fft_start_idx = 0,
    uint32_t fft_end_idx = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> weights = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> unweights = 0,
    int32_t num_channels = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> channel_frequency_starts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> channel_weight_starts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> channel_widths = 0) {
  FilterbankConfigBuilder builder_(_fbb);
  builder_.add_channel_widths(channel_widths);
  builder_.add_channel_weight_starts(channel_weight_starts);
  builder_.add_channel_frequency_starts(channel_frequency_starts);
  builder_.add_num_channels(num_channels);
  builder_.add_unweights(unweights);
  builder_.add_weights(weights);
  builder_.add_fft_end_idx(fft_end_idx);
  builder_.add_fft_start_idx(fft_start_idx);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FilterbankConfig> CreateFilterbankConfigDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t fft_start_idx = 0,
    uint32_t fft_end_idx = 0,
    const std::vector<int16_t> *weights = nullptr,
    const std::vector<int16_t> *unweights = nullptr,
    int32_t num_channels = 0,
    const std::vector<int16_t> *channel_frequency_starts = nullptr,
    const std::vector<int16_t> *channel_weight_starts = nullptr,
    const std::vector<int16_t> *channel_widths = nullptr) {
  auto weights__ = weights ? _fbb.CreateVector<int16_t>(*weights) : 0;
  auto unweights__ = unweights ? _fbb.CreateVector<int16_t>(*unweights) : 0;
  auto channel_frequency_starts__ = channel_frequency_starts ? _fbb.CreateVector<int16_t>(*channel_frequency_starts) : 0;
  auto channel_weight_starts__ = channel_weight_starts ? _fbb.CreateVector<int16_t>(*channel_weight_starts) : 0;
  auto channel_widths__ = channel_widths ? _fbb.CreateVector<int16_t>(*channel_widths) : 0;
  return FeatureConfigs::CreateFilterbankConfig(
      _fbb,
      fft_start_idx,
      fft_end_idx,
      weights__,
      unweights__,
      num_channels,
      channel_frequency_starts__,
      channel_weight_starts__,
      channel_widths__);
}

struct FeatureConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FeatureConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANNING_WINDOW = 4,
    VT_WINDOW_SCALING_BITS = 6,
    VT_FFT_TWIDDLE = 8,
    VT_FB_CONFIG = 10,
    VT_MEL_RANGE_MIN = 12,
    VT_MEL_RANGE_MAX = 14,
    VT_MEL_POST_SCALING_BITS = 16
  };
  const ::flatbuffers::Vector<int16_t> *hanning_window() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_HANNING_WINDOW);
  }
  uint8_t window_scaling_bits() const {
    return GetField<uint8_t>(VT_WINDOW_SCALING_BITS, 0);
  }
  const ::flatbuffers::Vector<int16_t> *fft_twiddle() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_FFT_TWIDDLE);
  }
  const FeatureConfigs::FilterbankConfig *fb_config() const {
    return GetPointer<const FeatureConfigs::FilterbankConfig *>(VT_FB_CONFIG);
  }
  int32_t mel_range_min() const {
    return GetField<int32_t>(VT_MEL_RANGE_MIN, 0);
  }
  int32_t mel_range_max() const {
    return GetField<int32_t>(VT_MEL_RANGE_MAX, 0);
  }
  uint8_t mel_post_scaling_bits() const {
    return GetField<uint8_t>(VT_MEL_POST_SCALING_BITS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HANNING_WINDOW) &&
           verifier.VerifyVector(hanning_window()) &&
           VerifyField<uint8_t>(verifier, VT_WINDOW_SCALING_BITS, 1) &&
           VerifyOffset(verifier, VT_FFT_TWIDDLE) &&
           verifier.VerifyVector(fft_twiddle()) &&
           VerifyOffset(verifier, VT_FB_CONFIG) &&
           verifier.VerifyTable(fb_config()) &&
           VerifyField<int32_t>(verifier, VT_MEL_RANGE_MIN, 4) &&
           VerifyField<int32_t>(verifier, VT_MEL_RANGE_MAX, 4) &&
           VerifyField<uint8_t>(verifier, VT_MEL_POST_SCALING_BITS, 1) &&
           verifier.EndTable();
  }
};

struct FeatureConfigBuilder {
  typedef FeatureConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_hanning_window(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> hanning_window) {
    fbb_.AddOffset(FeatureConfig::VT_HANNING_WINDOW, hanning_window);
  }
  void add_window_scaling_bits(uint8_t window_scaling_bits) {
    fbb_.AddElement<uint8_t>(FeatureConfig::VT_WINDOW_SCALING_BITS, window_scaling_bits, 0);
  }
  void add_fft_twiddle(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> fft_twiddle) {
    fbb_.AddOffset(FeatureConfig::VT_FFT_TWIDDLE, fft_twiddle);
  }
  void add_fb_config(::flatbuffers::Offset<FeatureConfigs::FilterbankConfig> fb_config) {
    fbb_.AddOffset(FeatureConfig::VT_FB_CONFIG, fb_config);
  }
  void add_mel_range_min(int32_t mel_range_min) {
    fbb_.AddElement<int32_t>(FeatureConfig::VT_MEL_RANGE_MIN, mel_range_min, 0);
  }
  void add_mel_range_max(int32_t mel_range_max) {
    fbb_.AddElement<int32_t>(FeatureConfig::VT_MEL_RANGE_MAX, mel_range_max, 0);
  }
  void add_mel_post_scaling_bits(uint8_t mel_post_scaling_bits) {
    fbb_.AddElement<uint8_t>(FeatureConfig::VT_MEL_POST_SCALING_BITS, mel_post_scaling_bits, 0);
  }
  explicit FeatureConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FeatureConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FeatureConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FeatureConfig> CreateFeatureConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> hanning_window = 0,
    uint8_t window_scaling_bits = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> fft_twiddle = 0,
    ::flatbuffers::Offset<FeatureConfigs::FilterbankConfig> fb_config = 0,
    int32_t mel_range_min = 0,
    int32_t mel_range_max = 0,
    uint8_t mel_post_scaling_bits = 0) {
  FeatureConfigBuilder builder_(_fbb);
  builder_.add_mel_range_max(mel_range_max);
  builder_.add_mel_range_min(mel_range_min);
  builder_.add_fb_config(fb_config);
  builder_.add_fft_twiddle(fft_twiddle);
  builder_.add_hanning_window(hanning_window);
  builder_.add_mel_post_scaling_bits(mel_post_scaling_bits);
  builder_.add_window_scaling_bits(window_scaling_bits);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FeatureConfig> CreateFeatureConfigDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *hanning_window = nullptr,
    uint8_t window_scaling_bits = 0,
    const std::vector<int16_t> *fft_twiddle = nullptr,
    ::flatbuffers::Offset<FeatureConfigs::FilterbankConfig> fb_config = 0,
    int32_t mel_range_min = 0,
    int32_t mel_range_max = 0,
    uint8_t mel_post_scaling_bits = 0) {
  auto hanning_window__ = hanning_window ? _fbb.CreateVector<int16_t>(*hanning_window) : 0;
  auto fft_twiddle__ = fft_twiddle ? _fbb.CreateVector<int16_t>(*fft_twiddle) : 0;
  return FeatureConfigs::CreateFeatureConfig(
      _fbb,
      hanning_window__,
      window_scaling_bits,
      fft_twiddle__,
      fb_config,
      mel_range_min,
      mel_range_max,
      mel_post_scaling_bits);
}

inline const FeatureConfigs::FeatureConfig *GetFeatureConfig(const void *buf) {
  return ::flatbuffers::GetRoot<FeatureConfigs::FeatureConfig>(buf);
}

inline const FeatureConfigs::FeatureConfig *GetSizePrefixedFeatureConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FeatureConfigs::FeatureConfig>(buf);
}

inline bool VerifyFeatureConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FeatureConfigs::FeatureConfig>(nullptr);
}

inline bool VerifySizePrefixedFeatureConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FeatureConfigs::FeatureConfig>(nullptr);
}

inline void FinishFeatureConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FeatureConfigs::FeatureConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFeatureConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FeatureConfigs::FeatureConfig> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FeatureConfigs

#endif  // FLATBUFFERS_GENERATED_FEATURECONFIG_FEATURECONFIGS_H_
